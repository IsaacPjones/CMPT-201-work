#define _DEFAULT_SOURCE
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>


#define BUF_SIZE 128

struct header {
  uint64_t size;
  struct header *next;
};

void handle_error(const char *msg) {
  perror(msg);
  _exit(1);
}

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format,
      data_size == sizeof(uint64_t) ? *(uint64_t *)data
      : *(void **)data);
  if (len < 0) {
    handle_error("snprintf");
  }
  write(STDOUT_FILENO, buf, len);
}


int main() {
  void *first_break = sbrk(256);
  if (first_break == (void *)-1) {
    perror("sbrk(0) failed");
    return 1;
  }

  struct header *block1 = (struct header*) first_break;
  struct header *block2 = (struct header*) ((char*)first_break + 128);
  block1->size = 128;
  block1->next = NULL;

  block2->size = 128;
  block2->next = block1;

  print_out("Block1 start: %p\n", &block1, sizeof(block1));
  print_out("Block2 start: %p\n", &block2, sizeof(block2));

  print_out("Block1 size: %lu\n", &block1->size, sizeof(uint64_t));
  print_out("Block1 next: %p\n", &block1->next, sizeof(block1->next));
  print_out("Block2 size: %lu\n", &block2->size, sizeof(uint64_t));
  print_out("Block2 next: %p\n", &block2->next, sizeof(block2->next));  

  void *data1 = (char*)block1 + sizeof(struct header);
  size_t data1_size = block1->size - sizeof(struct header);
  memset(data1, 0, data1_size);

  void *data2 = (char*)block2 + sizeof(struct header);
  size_t data2_size = block2->size - sizeof(struct header);
  memset(data2, 1, data2_size);





}






